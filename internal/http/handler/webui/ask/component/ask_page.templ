package component

import (
	"encoding/base64"
	"github.com/bornholm/corpus/internal/core/model"
	"github.com/bornholm/corpus/internal/core/port"
	"github.com/bornholm/corpus/internal/http/authz"
	common "github.com/bornholm/corpus/internal/http/handler/webui/common/component"
	"slices"
	"strconv"
	"strings"
	"time"
)

type AskPageVModel struct {
	Query                   string
	TotalDocuments          int64
	Results                 []*port.IndexSearchResult
	SectionContents         map[model.SectionID]string
	Collections             []model.Collection
	CollectionStats         map[model.CollectionID]*model.CollectionStats
	SelectedCollectionNames []string

	Response        string
	Duration        time.Duration
	UploadFileModal *UploadFileModalVModel

	Navbar *NavbarVModel
}

const defaultMaxCollections = 3

templ AskPage(vmodel AskPageVModel) {
	@common.Page(common.WithTitle("Posez votre question")) {
		if vmodel.UploadFileModal != nil {
			@UploadFileModal(*vmodel.UploadFileModal)
		}
		<div class="container">
			if vmodel.Navbar != nil {
				@Navbar(*vmodel.Navbar)
			}
			<section class="section pt-3">
				<div class="level">
					<div class="level-left"></div>
					<div class="level-right">
						if common.AssertUser(ctx, authz.Has(authz.RoleWriter)) {
							<a class="button is-outlined is-link" href={ common.CurrentURL(ctx, common.WithValues("action", "upload")) }><span>Indexer un fichier</span><span class="icon"><i class="fa fa-plus"></i></span></a>
						}
					</div>
				</div>
				<form method="post" hx-on:submit="htmx.addClass(htmx.find('#submit-button'), 'is-loading')">
					<div class="columns">
						<div class="column is-9">
							<div class="field is-large">
								<label class="label" for="query">Posez votre question <span class="has-text-weight-normal has-text-grey">({ strconv.FormatInt(vmodel.TotalDocuments, 10) } documents indexés)</span></label>
								<div class="control">
									<textarea id="query" name="q" class="textarea is-large">{ vmodel.Query }</textarea>
								</div>
							</div>
						</div>
						<div class="column is-3">
							<label class="label">Collections</label>
							<div class="tags are-large" style="overflow-x:auto">
								for i, c := range vmodel.Collections {
									{{ selected := slices.Contains(vmodel.SelectedCollectionNames, c.Name()) }}
									{{ stats := vmodel.CollectionStats[c.ID()] }}
									{{ url := common.CurrentURL(ctx, common.WithValues("collection", c.Name())) }}
									if selected {
										{{ url = common.CurrentURL(ctx, common.WithoutValues("collection", c.Name())) }}
									}
									{{ label := c.Label() }}
									if label == "" {
										{{ label = c.Name() }}
									}
									<a href={ url } title={ c.Description() } class={ "tag", "is-light", templ.KV("is-link", selected), templ.KV("is-hidden", i > defaultMaxCollections-1) }>
										{ label }
										if stats != nil {
											({ strconv.FormatInt(stats.TotalDocuments, 10) })
										}
									</a>
								}
								if len(vmodel.Collections) > defaultMaxCollections {
									<span class="tag is-clickable is-hoverable" hx-on:click="this.closest('.tags').querySelectorAll('.tag').forEach(t => t.classList.remove('is-hidden')); this.parentNode.removeChild(this)"><span class="icon"><i class="fas fa-ellipsis-h"></i></span></span>
								}
							</div>
							<p class="help">Sélectionnez les collections de documents que vous souhaitez incorporer à votre recherche. Par défaut, toutes sont utilisées.</p>
						</div>
					</div>
					<button id="submit-button" type="submit" class="button is-link is-fullwidth is-large">
						<span>Interroger</span>
						<span class="icon"><i class="far fa-comment"></i></span>
					</button>
				</form>
				if vmodel.Query != "" {
					<hr class="mt-5"/>
					<div class="mt-5">
						<div class="level">
							<div class="level-left">
								<h2 class="title is-size-2 level-item">
									<span>Réponse</span>
									<span class="has-text-weight-normal has-text-grey subtitle ml-3">(générée en { vmodel.Duration.Round(time.Second).String() })</span>
								</h2>
							</div>
							<div class="level-right">
								<div class="buttons level-item">
									if vmodel.Response != "" {
										<button
											class="button"
											hx-on:click="copyResponseToClipboard(this)"
											data-encoded-response={ base64.RawStdEncoding.EncodeToString([]byte(vmodel.Response)) }
										>
											<span>Copier</span>
											<span class="icon"><i class="fas fa-copy"></i></span>
										</button>
										<script type="text/javascript">
											function copyResponseToClipboard(el) {
												const encodedResponse = el.dataset.encodedResponse;
												const text = new TextDecoder().decode(Uint8Array.from(atob(encodedResponse), m => m.charCodeAt(0)))
												if (navigator.clipboard) {
													navigator.clipboard.writeText(text);
												} else {
													unsecuredCopyToClipboard(text);
												}
												el.innerHTML = '<span>Copié !</span><span class="icon"><i class="fas fa-check"></i></span>'
											}

											function unsecuredCopyToClipboard(text) {
												const textArea = document.createElement("textarea");
												textArea.value = text;
												document.body.appendChild(textArea);
												textArea.focus({ preventScroll: true });
												textArea.select();
												try {
													document.execCommand('copy');
												} catch (err) {
													console.error('Unable to copy to clipboard', err);
												}
												document.body.removeChild(textArea);
											}
										</script>
									}
								</div>
							</div>
						</div>
						if len(vmodel.Results) == 0 {
							<div class="message is-warning is-medium">
								<div class="message-body">
									Aucun résultat correspondant à votre question n'a été trouvé dans la base documentaire.
								</div>
							</div>
						} else {
							<div class="content is-size-4">
								@common.Markdown(vmodel.Response)
							</div>
							<h3 class="title is-size-3">Sources</h3>
							<div class="content">
								<ol>
									for _, r := range vmodel.Results {
										<li>
											<details>
												<summary><code class="is-clickable">{ r.Source.String() }</code> <a target="_blank" href={ templ.SafeURL(r.Source.String()) }><span class="icon"><i class="fas fa-external-link-alt"></i></span></a></summary>
												for idx, sectionID := range r.Sections {
													{{ content, ok := vmodel.SectionContents[sectionID] }}
													if ok {
														if idx != 0 {
															<hr/>
														}
														<div class={ "content is-size-6 mt-5 has-background-light has-text-grey-dark	px-5 py-3 is-family-monospace", templ.KV("mt-5", idx == 0) }>
															@common.Markdown(strings.TrimSpace(content))
														</div>
													}
												}
											</details>
										</li>
									}
								</ol>
							</div>
						}
					</div>
				}
			</section>
		</div>
	}
}
